"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _plist = _interopRequireDefault(require("@expo/plist"));
var _debug = _interopRequireDefault(require("debug"));
var _errors = require("../../../../utils/errors");
var _plist1 = require("../../../../utils/plist");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const BPLIST_MAGIC = Buffer.from("bplist00");
const debug = (0, _debug).default("expo:apple-device:protocol");
class ProtocolClientError extends _errors.CommandError {
    constructor(msg, error, protocolMessage){
        super(msg);
        this.error = error;
        this.protocolMessage = protocolMessage;
    }
}
exports.ProtocolClientError = ProtocolClientError;
class ProtocolReaderFactory {
    constructor(ProtocolReader1){
        this.ProtocolReader = ProtocolReader1;
    }
    create(callback) {
        return new this.ProtocolReader(callback);
    }
}
exports.ProtocolReaderFactory = ProtocolReaderFactory;
class ProtocolReader {
    constructor(headerSize, callback){
        this.headerSize = headerSize;
        this.callback = callback;
        this.buffer = Buffer.alloc(0);
        this.onData = this.onData.bind(this);
    }
    onData(data) {
        try {
            // if there's data, add it on to existing buffer
            this.buffer = data ? Buffer.concat([
                this.buffer,
                data
            ]) : this.buffer;
            // we haven't gotten the body length from th